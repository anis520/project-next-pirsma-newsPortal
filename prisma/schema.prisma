// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



 model categories{
  id Int @id @default(autoincrement())
  name String @db.VarChar(100) @unique 
  news_list news_list[]
  status Boolean @default(true)
 createdAt DateTime @default(now()) @db.Timestamp(0)
 updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
 }
model news_list{
  id Int @id @default(autoincrement())
  title String @db.VarChar(100)
  short_des String @db.VarChar(400)
  img1 String @db.VarChar(400)
  img2 String @db.VarChar(400)
  img3 String @db.VarChar(400)
  img4 String @db.VarChar(400)
  keywords String @db.VarChar(300)
  long_des String @db.LongText
  type String @db.VarChar(200)
  catID Int
  comments comments[]
  categories categories @relation(fields: [catID],references: [id],onDelete: Restrict ,onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
 }

model users{
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  email String @db.VarChar(50) @unique
  mobile String @db.VarChar(50)
  password String @db.VarChar(50)
  otp String @db.VarChar(10)
  role String @db.VarChar(50) @default("user") 
  isVerifyed Boolean @default(false)
  comments comments[]
  subscribers subscribers[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
 updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model comments{
  id Int @id @default(autoincrement())
  userId Int
  postId Int
  users users @relation(fields: [userId],references: [id],onDelete: Restrict ,onUpdate:  Cascade)
   news_list news_list @relation(fields: [postId],references: [id],onDelete: Restrict ,onUpdate:  Cascade)
   descriptions String @db.VarChar(1000)
}

model socials{
  id Int @id @default(autoincrement())
  facbook String @db.VarChar(200)
  youtube String @db.VarChar(200)
  twitter String @db.VarChar(200)
  linkedin String @db.VarChar(200)
  about String @db.Text
  address String @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
  
}

model subscribers{
 id Int @id @default(autoincrement())
   userId Int
 
 
 email String @db.VarChar(100) 
 amount String @db.VarChar(50)
 tran_id String @db.VarChar(100) @unique

 type String @db.VarChar(500)
 status Boolean @default(false)
  users users @relation(fields: [userId],references: [id],onDelete: Restrict ,onUpdate:  Cascade)
 createdAt DateTime @default(now()) @db.Timestamp(0)
 updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
  
}

model policies{
  id Int @id @default(autoincrement())
  long_des String @db.LongText
   type String @db.VarChar(50) 
}